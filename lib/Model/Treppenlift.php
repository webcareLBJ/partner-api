<?php
/**
 * Treppenlift
 *
 * PHP version 5
 *
 * @category Class
 * @package  PflegeDe\Partner
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * pflege.de partner API
 *
 * The Partner-API of pflege.de to create Affiliate-Leads programmatically
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PflegeDe\Partner\Model;

use \ArrayAccess;

/**
 * Treppenlift Class Doc Comment
 *
 * @category    Class
 * @package     PflegeDe\Partner
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Treppenlift implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Treppenlift';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'salutation' => 'string',
        'givenName' => 'string',
        'familyName' => 'string',
        'phoneNumber' => 'string',
        'phoneNumber2' => 'string',
        'zip' => 'string',
        'city' => 'string',
        'liftType' => 'string',
        'mountingLocation' => 'string',
        'obstacle' => 'string',
        'floor' => 'string',
        'livingSituation' => 'string',
        'careLevelState' => 'string',
        'carePersonWeight' => 'string',
        'targetPerson' => 'string',
        'pageUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'salutation' => 'string',
        'givenName' => 'string',
        'familyName' => 'string',
        'phoneNumber' => 'string',
        'phoneNumber2' => 'string',
        'zip' => 'string',
        'city' => 'string',
        'liftType' => 'string',
        'mountingLocation' => 'string',
        'obstacle' => 'string',
        'floor' => 'string',
        'livingSituation' => 'string',
        'careLevelState' => 'string',
        'carePersonWeight' => 'string',
        'targetPerson' => 'string',
        'pageUrl' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'salutation' => 'salutation',
        'givenName' => 'given_name',
        'familyName' => 'family_name',
        'phoneNumber' => 'phone_number',
        'phoneNumber2' => 'phone_number_2',
        'zip' => 'zip',
        'city' => 'city',
        'liftType' => 'lift_type',
        'mountingLocation' => 'mounting_location',
        'obstacle' => 'obstacle',
        'floor' => 'floor',
        'livingSituation' => 'living_situation',
        'careLevelState' => 'care_level_state',
        'carePersonWeight' => 'care_person_weight',
        'targetPerson' => 'target_person',
        'pageUrl' => 'page_url'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'salutation' => 'setSalutation',
        'givenName' => 'setGivenName',
        'familyName' => 'setFamilyName',
        'phoneNumber' => 'setPhoneNumber',
        'phoneNumber2' => 'setPhoneNumber2',
        'zip' => 'setZip',
        'city' => 'setCity',
        'liftType' => 'setLiftType',
        'mountingLocation' => 'setMountingLocation',
        'obstacle' => 'setObstacle',
        'floor' => 'setFloor',
        'livingSituation' => 'setLivingSituation',
        'careLevelState' => 'setCareLevelState',
        'carePersonWeight' => 'setCarePersonWeight',
        'targetPerson' => 'setTargetPerson',
        'pageUrl' => 'setPageUrl'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'salutation' => 'getSalutation',
        'givenName' => 'getGivenName',
        'familyName' => 'getFamilyName',
        'phoneNumber' => 'getPhoneNumber',
        'phoneNumber2' => 'getPhoneNumber2',
        'zip' => 'getZip',
        'city' => 'getCity',
        'liftType' => 'getLiftType',
        'mountingLocation' => 'getMountingLocation',
        'obstacle' => 'getObstacle',
        'floor' => 'getFloor',
        'livingSituation' => 'getLivingSituation',
        'careLevelState' => 'getCareLevelState',
        'carePersonWeight' => 'getCarePersonWeight',
        'targetPerson' => 'getTargetPerson',
        'pageUrl' => 'getPageUrl'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SALUTATION_HERR = 'Herr';
    const SALUTATION_FRAU = 'Frau';
    const LIFT_TYPE_SITZLIFT = 'Sitzlift';
    const LIFT_TYPE_PLATTFORMLIFT = 'Plattformlift';
    const LIFT_TYPE_HUBLIFT = 'Hublift';
    const LIFT_TYPE_NOCH_UNKLAR = 'Noch unklar';
    const MOUNTING_LOCATION_INNEN = 'Innen';
    const MOUNTING_LOCATION_AUSSEN = 'Außen';
    const MOUNTING_LOCATION_NOCH_UNKLAR = 'Noch unklar';
    const OBSTACLE_GERADE_TREPPE = 'Gerade Treppe';
    const OBSTACLE_KURVIGE_TREPPE = 'Kurvige Treppe';
    const OBSTACLE_SONSTIGES = 'Sonstiges';
    const OBSTACLE_NOCH_UNKLAR = 'Noch unklar';
    const FLOOR__1_ETAGE = '1 Etage';
    const FLOOR__2_ETAGEN = '2 Etagen';
    const FLOOR__3_ETAGEN_O_MEHR = '3 Etagen o mehr';
    const FLOOR_NOCH_UNKLAR = 'Noch unklar';
    const LIVING_SITUATION_EINFAMILIENHAUS__EIGENTUM = 'Einfamilienhaus (Eigentum)';
    const LIVING_SITUATION_INFAMILIENHAUS__MIETE = 'infamilienhaus (Miete)';
    const LIVING_SITUATION_MIETWOHNUNG = 'Mietwohnung';
    const LIVING_SITUATION_EIGENTUMSWOHNUNG = 'Eigentumswohnung';
    const CARE_LEVEL_STATE_JA = 'Ja';
    const CARE_LEVEL_STATE_NEIN = 'Nein';
    const CARE_LEVEL_STATE_BEANTRAGT = 'Beantragt';
    const CARE_LEVEL_STATE_UNBEKANNT = 'Unbekannt';
    const CARE_PERSON_WEIGHT_WENIGER_ALS_130KG = 'Weniger als 130kg';
    const CARE_PERSON_WEIGHT_MEHR_ALS_130KG = 'Mehr als 130kg';
    const CARE_PERSON_WEIGHT_NOCH_UNKLAR = 'Noch unklar';
    const TARGET_PERSON_JEMAND_ANDEREN = 'Für jemand anderen';
    const TARGET_PERSON_MICH = 'Für mich';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSalutationAllowableValues()
    {
        return [
            self::SALUTATION_HERR,
            self::SALUTATION_FRAU,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLiftTypeAllowableValues()
    {
        return [
            self::LIFT_TYPE_SITZLIFT,
            self::LIFT_TYPE_PLATTFORMLIFT,
            self::LIFT_TYPE_HUBLIFT,
            self::LIFT_TYPE_NOCH_UNKLAR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getMountingLocationAllowableValues()
    {
        return [
            self::MOUNTING_LOCATION_INNEN,
            self::MOUNTING_LOCATION_AUSSEN,
            self::MOUNTING_LOCATION_NOCH_UNKLAR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getObstacleAllowableValues()
    {
        return [
            self::OBSTACLE_GERADE_TREPPE,
            self::OBSTACLE_KURVIGE_TREPPE,
            self::OBSTACLE_SONSTIGES,
            self::OBSTACLE_NOCH_UNKLAR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFloorAllowableValues()
    {
        return [
            self::FLOOR__1_ETAGE,
            self::FLOOR__2_ETAGEN,
            self::FLOOR__3_ETAGEN_O_MEHR,
            self::FLOOR_NOCH_UNKLAR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLivingSituationAllowableValues()
    {
        return [
            self::LIVING_SITUATION_EINFAMILIENHAUS__EIGENTUM,
            self::LIVING_SITUATION_INFAMILIENHAUS__MIETE,
            self::LIVING_SITUATION_MIETWOHNUNG,
            self::LIVING_SITUATION_EIGENTUMSWOHNUNG,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCareLevelStateAllowableValues()
    {
        return [
            self::CARE_LEVEL_STATE_JA,
            self::CARE_LEVEL_STATE_NEIN,
            self::CARE_LEVEL_STATE_BEANTRAGT,
            self::CARE_LEVEL_STATE_UNBEKANNT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCarePersonWeightAllowableValues()
    {
        return [
            self::CARE_PERSON_WEIGHT_WENIGER_ALS_130KG,
            self::CARE_PERSON_WEIGHT_MEHR_ALS_130KG,
            self::CARE_PERSON_WEIGHT_NOCH_UNKLAR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTargetPersonAllowableValues()
    {
        return [
            self::TARGET_PERSON_JEMAND_ANDEREN,
            self::TARGET_PERSON_MICH,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['salutation'] = isset($data['salutation']) ? $data['salutation'] : null;
        $this->container['givenName'] = isset($data['givenName']) ? $data['givenName'] : null;
        $this->container['familyName'] = isset($data['familyName']) ? $data['familyName'] : null;
        $this->container['phoneNumber'] = isset($data['phoneNumber']) ? $data['phoneNumber'] : null;
        $this->container['phoneNumber2'] = isset($data['phoneNumber2']) ? $data['phoneNumber2'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['liftType'] = isset($data['liftType']) ? $data['liftType'] : null;
        $this->container['mountingLocation'] = isset($data['mountingLocation']) ? $data['mountingLocation'] : null;
        $this->container['obstacle'] = isset($data['obstacle']) ? $data['obstacle'] : null;
        $this->container['floor'] = isset($data['floor']) ? $data['floor'] : null;
        $this->container['livingSituation'] = isset($data['livingSituation']) ? $data['livingSituation'] : null;
        $this->container['careLevelState'] = isset($data['careLevelState']) ? $data['careLevelState'] : null;
        $this->container['carePersonWeight'] = isset($data['carePersonWeight']) ? $data['carePersonWeight'] : null;
        $this->container['targetPerson'] = isset($data['targetPerson']) ? $data['targetPerson'] : null;
        $this->container['pageUrl'] = isset($data['pageUrl']) ? $data['pageUrl'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getSalutationAllowableValues();
        if (!in_array($this->container['salutation'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'salutation', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if (!is_null($this->container['phoneNumber']) && !preg_match("/[0-9 \/-]/", $this->container['phoneNumber'])) {
            $invalid_properties[] = "invalid value for 'phoneNumber', must be conform to the pattern /[0-9 \/-]/.";
        }

        if (!is_null($this->container['phoneNumber2']) && !preg_match("/[0-9 \/-]/", $this->container['phoneNumber2'])) {
            $invalid_properties[] = "invalid value for 'phoneNumber2', must be conform to the pattern /[0-9 \/-]/.";
        }

        if (!is_null($this->container['zip']) && (strlen($this->container['zip']) > 5)) {
            $invalid_properties[] = "invalid value for 'zip', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['zip']) && (strlen($this->container['zip']) < 4)) {
            $invalid_properties[] = "invalid value for 'zip', the character length must be bigger than or equal to 4.";
        }

        if (!is_null($this->container['zip']) && !preg_match("/[0-9]{4,5}/", $this->container['zip'])) {
            $invalid_properties[] = "invalid value for 'zip', must be conform to the pattern /[0-9]{4,5}/.";
        }

        $allowed_values = $this->getLiftTypeAllowableValues();
        if (!in_array($this->container['liftType'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'liftType', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getMountingLocationAllowableValues();
        if (!in_array($this->container['mountingLocation'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'mountingLocation', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getObstacleAllowableValues();
        if (!in_array($this->container['obstacle'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'obstacle', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getFloorAllowableValues();
        if (!in_array($this->container['floor'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'floor', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getLivingSituationAllowableValues();
        if (!in_array($this->container['livingSituation'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'livingSituation', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getCareLevelStateAllowableValues();
        if (!in_array($this->container['careLevelState'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'careLevelState', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getCarePersonWeightAllowableValues();
        if (!in_array($this->container['carePersonWeight'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'carePersonWeight', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getTargetPersonAllowableValues();
        if (!in_array($this->container['targetPerson'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'targetPerson', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getSalutationAllowableValues();
        if (!in_array($this->container['salutation'], $allowed_values)) {
            return false;
        }
        if (!preg_match("/[0-9 \/-]/", $this->container['phoneNumber'])) {
            return false;
        }
        if (!preg_match("/[0-9 \/-]/", $this->container['phoneNumber2'])) {
            return false;
        }
        if (strlen($this->container['zip']) > 5) {
            return false;
        }
        if (strlen($this->container['zip']) < 4) {
            return false;
        }
        if (!preg_match("/[0-9]{4,5}/", $this->container['zip'])) {
            return false;
        }
        $allowed_values = $this->getLiftTypeAllowableValues();
        if (!in_array($this->container['liftType'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getMountingLocationAllowableValues();
        if (!in_array($this->container['mountingLocation'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getObstacleAllowableValues();
        if (!in_array($this->container['obstacle'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getFloorAllowableValues();
        if (!in_array($this->container['floor'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getLivingSituationAllowableValues();
        if (!in_array($this->container['livingSituation'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getCareLevelStateAllowableValues();
        if (!in_array($this->container['careLevelState'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getCarePersonWeightAllowableValues();
        if (!in_array($this->container['carePersonWeight'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getTargetPersonAllowableValues();
        if (!in_array($this->container['targetPerson'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets salutation
     * @return string
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     * @param string $salutation Anrede
     * @return $this
     */
    public function setSalutation($salutation)
    {
        $allowed_values = $this->getSalutationAllowableValues();
        if (!is_null($salutation) && !in_array($salutation, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'salutation', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets givenName
     * @return string
     */
    public function getGivenName()
    {
        return $this->container['givenName'];
    }

    /**
     * Sets givenName
     * @param string $givenName Vorname
     * @return $this
     */
    public function setGivenName($givenName)
    {
        $this->container['givenName'] = $givenName;

        return $this;
    }

    /**
     * Gets familyName
     * @return string
     */
    public function getFamilyName()
    {
        return $this->container['familyName'];
    }

    /**
     * Sets familyName
     * @param string $familyName Nachname
     * @return $this
     */
    public function setFamilyName($familyName)
    {
        $this->container['familyName'] = $familyName;

        return $this;
    }

    /**
     * Gets phoneNumber
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phoneNumber'];
    }

    /**
     * Sets phoneNumber
     * @param string $phoneNumber Telefonnummer
     * @return $this
     */
    public function setPhoneNumber($phoneNumber)
    {

        if (!is_null($phoneNumber) && (!preg_match("/[0-9 \/-]/", $phoneNumber))) {
            throw new \InvalidArgumentException("invalid value for $phoneNumber when calling Treppenlift., must conform to the pattern /[0-9 \/-]/.");
        }

        $this->container['phoneNumber'] = $phoneNumber;

        return $this;
    }

    /**
     * Gets phoneNumber2
     * @return string
     */
    public function getPhoneNumber2()
    {
        return $this->container['phoneNumber2'];
    }

    /**
     * Sets phoneNumber2
     * @param string $phoneNumber2 Alternative Telefonnummer
     * @return $this
     */
    public function setPhoneNumber2($phoneNumber2)
    {

        if (!is_null($phoneNumber2) && (!preg_match("/[0-9 \/-]/", $phoneNumber2))) {
            throw new \InvalidArgumentException("invalid value for $phoneNumber2 when calling Treppenlift., must conform to the pattern /[0-9 \/-]/.");
        }

        $this->container['phoneNumber2'] = $phoneNumber2;

        return $this;
    }

    /**
     * Gets zip
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     * @param string $zip PLZ
     * @return $this
     */
    public function setZip($zip)
    {
        if (!is_null($zip) && (strlen($zip) > 5)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling Treppenlift., must be smaller than or equal to 5.');
        }
        if (!is_null($zip) && (strlen($zip) < 4)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling Treppenlift., must be bigger than or equal to 4.');
        }
        if (!is_null($zip) && (!preg_match("/[0-9]{4,5}/", $zip))) {
            throw new \InvalidArgumentException("invalid value for $zip when calling Treppenlift., must conform to the pattern /[0-9]{4,5}/.");
        }

        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city Stadt
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets liftType
     * @return string
     */
    public function getLiftType()
    {
        return $this->container['liftType'];
    }

    /**
     * Sets liftType
     * @param string $liftType Was für einen Treppenlift suchen Sie?
     * @return $this
     */
    public function setLiftType($liftType)
    {
        $allowed_values = $this->getLiftTypeAllowableValues();
        if (!is_null($liftType) && !in_array($liftType, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'liftType', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['liftType'] = $liftType;

        return $this;
    }

    /**
     * Gets mountingLocation
     * @return string
     */
    public function getMountingLocation()
    {
        return $this->container['mountingLocation'];
    }

    /**
     * Sets mountingLocation
     * @param string $mountingLocation Wo soll der Lift montiert werden?
     * @return $this
     */
    public function setMountingLocation($mountingLocation)
    {
        $allowed_values = $this->getMountingLocationAllowableValues();
        if (!is_null($mountingLocation) && !in_array($mountingLocation, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mountingLocation', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['mountingLocation'] = $mountingLocation;

        return $this;
    }

    /**
     * Gets obstacle
     * @return string
     */
    public function getObstacle()
    {
        return $this->container['obstacle'];
    }

    /**
     * Sets obstacle
     * @param string $obstacle Welche Form hat die Treppe?
     * @return $this
     */
    public function setObstacle($obstacle)
    {
        $allowed_values = $this->getObstacleAllowableValues();
        if (!is_null($obstacle) && !in_array($obstacle, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'obstacle', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['obstacle'] = $obstacle;

        return $this;
    }

    /**
     * Gets floor
     * @return string
     */
    public function getFloor()
    {
        return $this->container['floor'];
    }

    /**
     * Sets floor
     * @param string $floor Für wie viele Etagen ist der Lift gedacht?
     * @return $this
     */
    public function setFloor($floor)
    {
        $allowed_values = $this->getFloorAllowableValues();
        if (!is_null($floor) && !in_array($floor, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'floor', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['floor'] = $floor;

        return $this;
    }

    /**
     * Gets livingSituation
     * @return string
     */
    public function getLivingSituation()
    {
        return $this->container['livingSituation'];
    }

    /**
     * Sets livingSituation
     * @param string $livingSituation Wie ist die derzeitige häusliche Situation?
     * @return $this
     */
    public function setLivingSituation($livingSituation)
    {
        $allowed_values = $this->getLivingSituationAllowableValues();
        if (!is_null($livingSituation) && !in_array($livingSituation, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'livingSituation', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['livingSituation'] = $livingSituation;

        return $this;
    }

    /**
     * Gets careLevelState
     * @return string
     */
    public function getCareLevelState()
    {
        return $this->container['careLevelState'];
    }

    /**
     * Sets careLevelState
     * @param string $careLevelState Liegt ein Pflegegrad vor?
     * @return $this
     */
    public function setCareLevelState($careLevelState)
    {
        $allowed_values = $this->getCareLevelStateAllowableValues();
        if (!is_null($careLevelState) && !in_array($careLevelState, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'careLevelState', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['careLevelState'] = $careLevelState;

        return $this;
    }

    /**
     * Gets carePersonWeight
     * @return string
     */
    public function getCarePersonWeight()
    {
        return $this->container['carePersonWeight'];
    }

    /**
     * Sets carePersonWeight
     * @param string $carePersonWeight Für welches Gewicht soll der Lift ausgelegt sein?
     * @return $this
     */
    public function setCarePersonWeight($carePersonWeight)
    {
        $allowed_values = $this->getCarePersonWeightAllowableValues();
        if (!is_null($carePersonWeight) && !in_array($carePersonWeight, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'carePersonWeight', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['carePersonWeight'] = $carePersonWeight;

        return $this;
    }

    /**
     * Gets targetPerson
     * @return string
     */
    public function getTargetPerson()
    {
        return $this->container['targetPerson'];
    }

    /**
     * Sets targetPerson
     * @param string $targetPerson Für wen ist der Treppenlift?
     * @return $this
     */
    public function setTargetPerson($targetPerson)
    {
        $allowed_values = $this->getTargetPersonAllowableValues();
        if (!is_null($targetPerson) && !in_array($targetPerson, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'targetPerson', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['targetPerson'] = $targetPerson;

        return $this;
    }

    /**
     * Gets pageUrl
     * @return string
     */
    public function getPageUrl()
    {
        return $this->container['pageUrl'];
    }

    /**
     * Sets pageUrl
     * @param string $pageUrl Die URL der Seite, auf der der Lead ausgelöst wurde
     * @return $this
     */
    public function setPageUrl($pageUrl)
    {
        $this->container['pageUrl'] = $pageUrl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\PflegeDe\Partner\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\PflegeDe\Partner\ObjectSerializer::sanitizeForSerialization($this));
    }
}


